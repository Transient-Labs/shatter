// SPDX-License-Identifier: Apache-2.0

/// @title Shatter Creator V1
/// @author transientlabs.xyz

pragma solidity ^0.8.9;

import "OpenZeppelin/openzeppelin-contracts@4.7.0/contracts/proxy/ERC1967/ERC1967Proxy.sol";

interface ShatterRegistry {
    function register(address _deployer, uint256 _version, bytes32 _nonce, bytes memory _sig) external virtual;
}

contract ShatterCreatorV1 is ERC1967Proxy {

    /// @param _sig is the trusted signature to log this as a valid Shatter contract in the Shatter registry
    /// @param _nonce is the nonce generated by the trusted signer when deploying
    /// @param _name is the name of the contract and piece
    /// @param _symbol is the symbol
    /// @param _royaltyRecipient is the royalty recipient
    /// @param _royaltyPercentage is the royalty percentage to set
    /// @param _admin is the admin address
    /// @param _minShatters is the minimum number of editions
    /// @param _maxShatters is the maximum number of editions
    /// @param _shatterTime is time after which replication can occur
    constructor(bytes memory _sig, bytes32 _nonce, string memory _name, string memory _symbol,
        address _royaltyRecipient, uint256 _royaltyPercentage, address _admin,
        uint256 _minShatters, uint256 _maxShatters, uint256 _shatterTime)
        ERC1967Proxy(0xdB733ea1Bf6a8DCD1318903E17e500EA38aA006d, abi.encodeWithSignature(
            "initialize(string,string,address,uint256,address,uint256,uint256,uint256)",
            _name, _symbol, _royaltyRecipient, _royaltyPercentage, _admin, _minShatters, _maxShatters, _shatterTime))
        {
            ShatterRegistry(0xFa72C510E819cA0C142Ce91973fC2f0739148dEC).register(msg.sender, 1, _nonce, _sig);
        }
}